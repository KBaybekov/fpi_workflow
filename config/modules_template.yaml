sequence: ['primary_qc', 'myco_qc', 'de_novo_assembling_docker', 'qc_assembling_ntm_ref', 'qc_assembling_ntm_ref_docker',
  'qc_assembling_ntm_ref_docker_r2_only', 'small_variant_calling_ntm_ref']

primary_qc:
  module_before:
    none
  folders:
    input_dir:
    output_dir:
      log_dir:
        Logs
      fastqc_dir:
        fastQC
      kraken2_dir:
        kraken2
      multiqc_dir:
        multiqc
  
  source_extensions:
    ['1.fastq.gz', '1.fq.gz']

  filenames:
    filename: |
      os.path.basename(sample).split('.')[0]
    run_id: |
      f"{filenames['filename'].split('_')[0]}"
    basename: |
      f"{filenames['filename'].split('_')[0]}_{filenames['filename'].split('_')[1]}"
    pair_of_fqs: |
      f"{sample.replace('_1.fastq.gz', '').replace('_1.fq.gz', '')}*"
    kraken2_report_16S: |
      f"{folders['kraken2_dir']}{filenames['basename']}_16S.kreport"
    kraken2_report_fungi: |
      f"{folders['kraken2_dir']}{filenames['basename']}_fungi.kreport"
    kraken2_report_human: |
      f"{folders['kraken2_dir']}{filenames['basename']}_human.kreport"

  commands:
    before_batch:
      - kraken2_db_to_RAM
    sample_level:
      - kraken2_16S
      - kraken2_fungi
      - kraken2_human
    after_batch:
      - kraken2_out_of_RAM
      - multiqc


myco_qc:
  module_before:
    none
  folders:
    input_dir:
    output_dir:
      log_dir:
        Logs
      tmp_dir:
        tmp
      kraken2_dir:
        kraken2
  
  source_extensions:
    ['1.fastq.gz', '1.fq.gz']

  filenames:
    filename: |
      os.path.basename(sample).split('.')[0]
    basename: |
      f"{filenames['filename'].split('_')[0]}_{filenames['filename'].split('_')[1]}"
    pair_of_fqs: |
      f"{sample.replace('_1.fastq.gz', '').replace('_1.fq.gz', '')}*"
    kraken2_out_fq: |
      f"{folders['tmp_dir']}{filenames['basename']}#.fq"
    kraken2_report_myco: |
      f"{folders['kraken2_dir']}{filenames['basename']}_myco.kreport"


  commands:
    before_batch:
      - kraken2_db_to_RAM_myco
    sample_level:
      - kraken2_myco_16S
      - kraken2_myco
    after_batch:
      - kraken2_out_of_RAM_myco


de_novo_assembling:
  module_before:
    none
  folders:
    input_dir:
    output_dir:
      tmp_dir:
        tmp
      fasta_dir:
        fasta
      quast_dir:
        quast
      busco_dir:
        busco
  
  source_extensions:
    ['1.fastq.gz', '1.fq.gz']

  filenames:
    filename: |
      os.path.basename(sample).split('.')[0]
    basename: |
      f"{filenames['filename'].split('_')[0]}_{filenames['filename'].split('_')[1]}"
    pair_of_fqs: |
      [sample, sample.replace('_1.fastq.gz', '_2.fastq.gz').replace('_1.fq.gz', '_2.fq.gz')]
    spades_fasta: |
      filenames['filename'].replace('_R1.fastq.gz', '_spades.fasta').replace('_R1.fq.gz', '_spades.fasta')
    pilon_fasta: |
      filenames['spades_fasta'].replace('spades', 'pilon')
    final_fasta: |
      filenames['pilon_fasta'].replace('_pilon', '')
  commands:
    before_batch:
    sample_level:
      - spades
      - rename_spades_fasta
      - pilon
      - abacas
      - quast
      - busco
    after_batch:
 
  result_dir: >-
    fasta


de_novo_assembling_docker:
  module_before:
    none
  folders:
    input_dir:
    output_dir:
      tmp_dir:
        tmp
      fasta_dir:
        fasta
      quast_dir:
        quast
      busco_dir:
        busco
  
  source_extensions:
    ['1.fastq.gz', '1.fq.gz']

  filenames:
    filename: >-
      os.path.basename(sample).split('.')[0]
    basename: >-
      f"{filenames['filename'].split('_')[0]}_{filenames['filename'].split('_')[1]}"
    run_id: >-
      filenames['filename'].split('_')[0]
    pair_of_fqs: >-
      [os.path.basename(sample), os.path.basename(sample).replace('_1.fastq.gz', '_2.fastq.gz').replace('_1.fq.gz', '_2.fq.gz')]
    fasta: >-
      f"{filenames['filename']}.fasta"
  commands:
    before_batch:
     - start_docker_ntm
    sample_level:
      - spades_docker_only_assembler_unpaired_r2_only
      - polishing_bwa_docker
      - polishing_pilon_docker_r2_only
    after_batch:
      - stop_docker_ntm
 
  result_dir: >-
    fasta


qc_assembling_ntm_ref_docker:
  timeout_behavior: next
  module_before:
    de_novo_assembling_docker
  folders:
    input_dir:
    output_dir:
      tmp_dir:
        tmp
  
  source_extensions:
    ['.fasta']

  filenames:
    filename: >-
      os.path.basename(sample).split('.')[0]
    basename: >-
      f"{filenames['filename'].split('_')[0]}_{filenames['filename'].split('_')[1]}"
    run_id: >-
      filenames['filename'].split('_')[0]
    pair_of_fqs: >-
      [f'{filenames['basename']}_1.fq.gz', f'{filenames['basename']}_2.fq.gz']
    busco: >-
      f"{folders['tmp_dir']}busco/*busco.json"
    quast_report: >-
      f"{folders['tmp_dir']}transposed_report.tsv"
  commands:
    before_batch:
     - start_docker_ntm
     #- create_chmod_loop_quast
    sample_level:
      #- busco_docker
      #- parse_busco
      - quast_docker_0
      - quast_chown_0
      - quast_docker_1
      - quast_chown_1
      #- quast_docker_2
      - parse_quast
      - rm_tmp_files_docker
    after_batch:
      - stop_docker_ntm
 
  result_dir: >-
    No


qc_assembling_ntm_ref:
  timeout_behavior: next
  module_before:
    de_novo_assembling
  folders:
    input_dir:
    output_dir:
      tmp_dir:
        tmp
  
  source_extensions:
    ['.fasta']

  filenames:
    filename: >-
      os.path.basename(sample).split('.')[0]
    basename: >-
      f"{filenames['filename'].split('_')[0]}_{filenames['filename'].split('_')[1]}"
    run_id: >-
      filenames['filename'].split('_')[0]
    pair_of_fqs: >-
      [f'{filenames["basename"]}_1.fq.gz', f'{filenames["basename"]}_2.fq.gz']
    busco: >-
      f"{folders['tmp_dir']}busco/*busco.json"
    quast_report: >-
      f"{folders['tmp_dir']}transposed_report.tsv"
  commands:
    before_batch:
    sample_level:
      #- busco_docker
      #- parse_busco
      - quast
      - parse_quast
      - rm_tmp_files
    after_batch:
      - rm_tmp_dir
  result_dir: >-
    No


qc_assembling_ntm_ref:
  timeout_behavior: next
  module_before:
    de_novo_assembling
  folders:
    input_dir:
    output_dir:
      tmp_dir:
        tmp_0
  
  source_extensions:
    ['.fasta']

  filenames:
    filename: >-
      os.path.basename(sample).split('.')[0]
    basename: >-
      f"{filenames['filename'].split('_')[0]}_{filenames['filename'].split('_')[1]}"
    run_id: >-
      filenames['filename'].split('_')[0]
    pair_of_fqs: >-
      [f'{filenames["basename"]}_1.fq.gz', f'{filenames["basename"]}_2.fq.gz']
    busco: >-
      f"{folders['tmp_dir']}busco/*busco.json"
    quast_report: >-
      f"{folders['tmp_dir']}transposed_report.tsv"
  commands:
    before_batch:
    sample_level:
      #- busco_docker
      #- parse_busco
      - quast_r2
      - parse_quast_r2
      - rm_tmp_files
    after_batch:
      - rm_tmp_dir
  result_dir: >-
    No


qc_assembling_ntm_ref_docker_r2_only:
  timeout_behavior: next
  module_before:
    de_novo_assembling_docker
  folders:
    input_dir:
    output_dir:
      tmp_dir:
        tmp
  
  source_extensions:
    ['.fasta']

  filenames:
    filename: >-
      os.path.basename(sample).split('.')[0]
    basename: >-
      f"{filenames['filename'].split('_')[0]}_{filenames['filename'].split('_')[1]}"
    run_id: >-
      filenames['filename'].split('_')[0]
    pair_of_fqs: >-
      [f'{filenames['basename']}_1.fq.gz', f'{filenames['basename']}_2.fq.gz']
    busco: >-
      f"{folders['tmp_dir']}busco/*busco.json"
    quast: >-
      f"{folders['tmp_dir']}quast/transposed_report.tsv"
  commands:
    before_batch:
     - start_docker_ntm
     #- create_chmod_loop_quast
    sample_level:
      - busco_docker
      - parse_busco
      - quast_docker_0_r2_only
      - quast_chown_0
      - quast_docker_1_r2_only
      - quast_chown_1
      - quast_docker_2_r2_only
      - parse_quast
      - rm_tmp_files_docker
    after_batch:
      - stop_docker_ntm
 
  result_dir: >-
    No



small_variant_calling_ntm_ref:
  module_before:
    none
  folders:
    input_dir:
    output_dir:
      tmp_dir:
        tmp
      bam_dir:
        bam
      vcf_dir:
        vcf
  
  source_extensions:
    ['1.fastq.gz', '1.fq.gz']

  filenames:
    filename: >-
      os.path.basename(sample).split('.')[0]
    basename: >-
      f"{filenames['filename'].split('_')[0]}_{filenames['filename'].split('_')[1]}"
    run_id: >-
      filenames['filename'].split('_')[0]
    pair_of_fqs: >-
      [os.path.basename(sample), os.path.basename(sample).replace('_1.fastq.gz', '_2.fastq.gz').replace('_1.fq.gz', '_2.fq.gz')]
    bam: >-
      f"{filenames['filename']}.bam"
    vcf: >-
      f"{filenames['filename']}.vcf"
  commands:
    before_batch:
      - mkdir_tmp
    sample_level:
      - bwa
      - gatk_sort_sam
      - gatk_mark_duplicates
      - gatk_build_bam_index
      - gatk_haplotype_caller
      - rm_tmp_files
    after_batch:
      - rm_tmp_dir
 
  result_dir: >-
    fasta