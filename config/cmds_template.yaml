#before batch
kraken2_db_to_RAM: |
  cp -r /home/data/REFERENCE_FILES/kraken2/human/ /dev/shm/
  cp -r /home/data/REFERENCE_FILES/kraken2/fungi/ /dev/shm/
  cp -r /home/data/REFERENCE_FILES/kraken2/16S_rdp/ /dev/shm/
kraken2_db_to_RAM_myco: |
  cp -r /home/data/REFERENCE_FILES/kraken2/16S_rdp/ /dev/shm/
  cp -r /home/data/REFERENCE_FILES/kraken2/mycobacteriaceae_tmp/ /dev/shm/
start_docker_ntm: >-
  f'docker run --privileged -d --name ntm_container -v {args["ref_dir"]}:/ref -v {folders["input_dir"]}:/fq -v {folders["output_dir"]}:/output -v {folders["tmp_dir"]}:/tmp/ ntm_assembler_aligner sleep infinity'

#batch
#qc
kraken2_16S: >-
  f"{programms['kraken2']} --db /dev/shm/16S_rdp --threads {args['threads']} --paired {filenames['pair_of_fqs']} --report {filenames['kraken2_report_16S']} --output - --report-minimizer-data"
kraken2_fungi: >-
  f'{programms["kraken2"]} --db /dev/shm/fungi --threads {args["threads"]} --paired {filenames["pair_of_fqs"]} --report {filenames["kraken2_report_fungi"]} --output - --report-minimizer-data'
kraken2_human: >-
  f'{programms["kraken2"]} --db /dev/shm/human --threads {args["threads"]} --paired {filenames["pair_of_fqs"]} --report {filenames["kraken2_report_human"]} --output - --report-minimizer-data'
fastqc: >-
  f'{programms["fastqc"]} --quiet --threads 2 -o {folders["fastqc_dir"]} {filenames["pair_of_fqs"]}'
kraken2_myco_16S: >-
  f"{programms['kraken2']} --db /dev/shm/16S_rdp --threads {args['threads']} --paired {filenames['pair_of_fqs']} --minimum-hit-groups 1 --output - --classified-out {filenames['kraken2_out_fq']}"
kraken2_myco: >-
  f'{programms["kraken2"]} --db /dev/shm/mycobacteriaceae_tmp --threads {args["threads"]} --paired {filenames["kraken2_out_fq"].replace("#","*")} --report {filenames["kraken2_report_myco"]} --output - --report-minimizer-data'


#de_novo_assembling_docker
spades: >-
  f"spades.py -o {folders['tmp_dir']} -1 {filenames["pair_of_fqs"][0]} -2 {filenames["pair_of_fqs"][1]}
  -t {args["threads"]} --careful -m 100 -k 21,33,55,77 --phred-offset 33"
#4min per 1M reads
spades_docker:
  - 600
  - >-
    f"""docker exec ntm_container /bin/bash -c '{programms["spades"]} -o /tmp --isolate
    -1 /fq/{filenames["run_id"]}/{filenames["pair_of_fqs"][0]} -2 /fq/{filenames["run_id"]}/{filenames["pair_of_fqs"][1]}
    --threads {args["threads"]} -m 100 -k 21,33,55,77'"""
spades_docker_no_isolate:
  - 600
  - >-
    f"""docker exec ntm_container /bin/bash -c '{programms["spades"]} -o /tmp
    -1 /fq/{filenames["run_id"]}/{filenames["pair_of_fqs"][0]} -2 /fq/{filenames["run_id"]}/{filenames["pair_of_fqs"][1]}
    --threads {args["threads"]} -m 100 -k 21,33,55,77'"""
spades_docker_meta:
  - 600
  - >-
    f"""docker exec ntm_container /bin/bash -c '{programms["spades"]} -o /tmp --meta
    -1 /fq/{filenames["run_id"]}/{filenames["pair_of_fqs"][0]} -2 /fq/{filenames["run_id"]}/{filenames["pair_of_fqs"][1]}
    --threads {args["threads"]} -m 100 -k 21,33,55,77'"""
polishing_bwa_docker: >-
  f"""docker exec ntm_container /bin/bash -c '{programms["bwa_mem2"]} index /tmp/contigs.fasta
  && {programms["bwa_mem2"]} mem -t {args["threads"]} -M /tmp/contigs.fasta /fq/{filenames["run_id"]}/{filenames["basename"]}*.fq.gz
  | samtools view -@ {args["threads"]} -S -b -F 4 -F 8 -F 256 > /tmp/0.bam
  && time samtools sort -@ {args["threads"]} /tmp/0.bam > /tmp/frags.bam
  && samtools index -@ {args["threads"]} /tmp/frags.bam'"""
polishing_pilon_docker: >-
  f"""docker exec ntm_container /bin/bash -c '{programms["pilon"]} --genome /tmp/contigs.fasta
  --frags /tmp/frags.bam --output {filenames["basename"]} --outdir /output/{os.path.basename(os.path.normpath(folders["fasta_dir"]))}'"""
FIX_polishing_abacas_docker: >-
  'perl /home/data/Programms/abacas/abacas.1.3.1.pl -r {} -q {} -p nucmer -i 20 -c -o {}{}_abacas'
#qc_assembling_docker
busco_docker: >-
  f"""docker exec ntm_container /bin/bash -c '{programms['busco']} -i /input/{sample} --cpu {args['threads']}
  --out_path /tmp/ --mode genome --lineage /ref/bacteria_odb10/ --offline --out busco --force'"""
quast_docker: >-
  f"""docker exec ntm_container /bin/bash -c '{programms['quast']} --threads {args['threads']} -o /tmp/quast/ -r /ref/bwa/{args['refs4ids'][filenames["basename"]]}*.fna
  /input/{filenames['fasta']}
  -1 /fq/{filenames['run_id']}/{filenames['pair_of_fqs'][0]} -2 /fq/{filenames['run_id']}/{filenames['pair_of_fqs'][1]}
  --min-contig 500 --use-all-alignments --k-mer-stats --no-plots --no-read-stats'"""
parse_busco: >-
  f'python3 {args["project_path"]}/src/busco_parser.py {filenames["basename"]} {filenames["busco"]} {folders['output_dir']}busco.xlsx'
parse_quast: >-
  f'python3 {args["project_path"]}/src/quast_parser.py {filenames["basename"]} {filenames["busco"]} {folders['output_dir']}quast.xlsx'

#vcf_calling
bwa_docker: >-
  bwa mem -M -R "@RG\\tID:{filenames["basename"]}\\tLB:{filenames["run_id"]}\\tPL:MGI\\tPM:G50\\tSM:{filenames["basename"]}"
  {args["refs4ids"][filenames["basename"]]} /fq/{filenames["run_id"]}/{filenames["pair_of_fqs"][0]} /fq/{filenames["run_id"]}/{filenames["pair_of_fqs"][1]}
  > /tmp/0.sam
picard_sort_sam_docker: >-
  picard-tools SortSam I=/tmp/0.sam O=/tmp/0_sorted.bam SORT_ORDER=coordinate
picard_mark_duplicates_docker: >-
  picard-tools MarkDuplicates INPUT=/tmp/0_sorted.bam OUTPUT=/tmp/0_sorted_dedup.bam METRICS_FILE=/tmp/0_metrics.txt
picard_build_bam_index_docker: >-
  picard-tools BuildBamIndex I=/tmp/0_sorted_dedup.bam
picard_realign_target_docker: >-
  java -Xmx8G -jar {software/GenomeAnalysisTK.jar} -T RealignerTargetCreator -R {args["refs4ids"][filenames["basename"]]} -rf BadCigar
  -I /tmp/0_sorted_dedup.bam -o /tmp/0_sorted_dedup_bam_realignment_targets.list --allow_potentially_misencoded_quality_scores
picard_indel_realigner_docker: >-
  java -Xmx8G -jar {software/GenomeAnalysisTK.jar} -T IndelRealigner -R {args["refs4ids"][filenames["basename"]]} -rf BadCigar
  --consensusDeterminationModel USE_READS -I /tmp/0_sorted_dedup.bam -targetIntervals /tmp/0_sorted_dedup_bam_realignment_targets.list
  -o /tmp/0_sorted_dedup_realigned_reads.bam --allow_potentially_misencoded_quality_scores
picard_base_recalibrator_docker: >-
  java -Xmx8G -jar {software/GenomeAnalysisTK.jar} -T BaseRecalibrator --interval_padding 50 -R {args["refs4ids"][filenames["basename"]]}
  -rf BadCigar -I /tmp/0_sorted_dedup_realigned_reads.bam -o /tmp/sorted_dedup_realigned_reads.bam_recal_data.table
picard_pint_reads_docker: >-
  java -Xmx8G -jar {software/GenomeAnalysisTK.jar} -T PrintReads -R {args["refs4ids"][filenames["basename"]]} -rf BadCigar
  -BQSR /tmp/sorted_dedup_realigned_reads.bam_recal_data.table -I /tmp/0_sorted_dedup_realigned_reads.bam
  -o /tmp/sorted_dedup_realigned_reads_recal.bam --allow_potentially_misencoded_quality_scores
picard_build_bam_index_docker: >-
  java -Xmx8G -jar {software/GenomeAnalysisTK.jar} -T HaplotypeCaller -R {args["refs4ids"][filenames["basename"]]} --interval_padding 50
  -I /tmp/sorted_dedup_realigned_reads_recal.bam -ploidy 1 -o /output/vcf/ploidy.vcf
rm_tmp_files_docker: >-
  docker exec ntm_container /bin/bash -c "rm -rf /tmp/*"

#after batch
kraken2_out_of_RAM_myco: |
  rm -rf /dev/shm/16S_rdp/
  rm -rf /dev/shm/mycobacteriaceae_tmp/
kraken2_out_of_RAM: |
  rm -rf /dev/shm/16S_rdp/
  rm -rf /dev/shm/human/
  rm -rf /dev/shm/fungi/
multiqc:
  f'{programms["multiqc"]} {folders["output_dir"]} --outdir {folders["multiqc_dir"]} --interactive --export --quiet'
stop_docker_ntm: |
  docker container stop ntm_container
  docker container rm ntm_container